using System;
using System.Diagnostics.CodeAnalysis;

namespace CsvHandler.Core;

/// <summary>
/// Base class for source-generated CSV serialization contexts.
/// Provides metadata and converters for CSV operations in an AOT-safe manner.
/// </summary>
/// <remarks>
/// This class is used by the source generator to create type-safe, reflection-free
/// CSV serialization code. User code should not derive from this class directly;
/// instead, use the [CsvSerializable] attribute to generate a context automatically.
/// </remarks>
public abstract class CsvContext
{
    /// <summary>
    /// Gets the default options for this context.
    /// </summary>
    public virtual CsvOptions Options { get; } = CsvOptions.Default;

    /// <summary>
    /// Gets metadata for a specific type in this context.
    /// </summary>
    /// <typeparam name="T">The type to get metadata for.</typeparam>
    /// <returns>The type metadata, or null if the type is not registered in this context.</returns>
    public abstract CsvTypeMetadata<T>? GetTypeMetadata<T>() where T : class;

    /// <summary>
    /// Gets a type handler for reading CSV data.
    /// Source-generated contexts should override this to provide type-specific handlers.
    /// </summary>
    /// <typeparam name="T">The type to deserialize.</typeparam>
    /// <returns>The type handler, or null if not available in this context.</returns>
    public virtual ICsvTypeHandler<T>? GetTypeHandler<T>()
    {
        // Base implementation returns null - source generator will override this
        // to return generated type handlers for registered types
        return null;
    }
}

/// <summary>
/// Metadata describing how a type should be serialized to/from CSV.
/// Generated by the source generator for each [CsvRecord] type.
/// Supports reference types, value types, and record structs.
/// </summary>
/// <typeparam name="T">The type this metadata describes.</typeparam>
public sealed class CsvTypeMetadata<T>
{
    /// <summary>
    /// Gets the type being described.
    /// </summary>
    public Type Type { get; }

    /// <summary>
    /// Gets the field metadata for all CSV fields in this type.
    /// </summary>
    public CsvFieldMetadata[] Fields { get; }

    /// <summary>
    /// Delegate for writing a value to CSV using the Utf8CsvWriter.
    /// </summary>
    public delegate void WriteValue(ref Utf8CsvWriter writer, T value);

    /// <summary>
    /// Delegate for writing headers to CSV using the Utf8CsvWriter.
    /// </summary>
    public delegate void WriteHeader(ref Utf8CsvWriter writer);

    /// <summary>
    /// Gets the function to write a value to CSV.
    /// </summary>
    public WriteValue? WriteValueFunc { get; }

    /// <summary>
    /// Gets the function to write headers to CSV.
    /// </summary>
    public WriteHeader? WriteHeaderFunc { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="CsvTypeMetadata{T}"/> class.
    /// </summary>
    public CsvTypeMetadata(
        Type type,
        CsvFieldMetadata[] fields,
        WriteValue? writeValue,
        WriteHeader? writeHeader)
    {
        Type = type;
        Fields = fields;
        WriteValueFunc = writeValue;
        WriteHeaderFunc = writeHeader;
    }
}

/// <summary>
/// Metadata describing a single CSV field.
/// </summary>
public sealed class CsvFieldMetadata
{
    /// <summary>
    /// Gets the field name as it appears in the CSV header.
    /// </summary>
    public string Name { get; }

    /// <summary>
    /// Gets the field order/index in the CSV.
    /// </summary>
    public int Order { get; }

    /// <summary>
    /// Gets the field's .NET type.
    /// </summary>
    public Type FieldType { get; }

    /// <summary>
    /// Gets whether this field is required (non-nullable).
    /// </summary>
    public bool IsRequired { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="CsvFieldMetadata"/> class.
    /// </summary>
    public CsvFieldMetadata(string name, int order, Type fieldType, bool isRequired)
    {
        Name = name;
        Order = order;
        FieldType = fieldType;
        IsRequired = isRequired;
    }
}
