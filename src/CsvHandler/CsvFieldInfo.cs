// Copyright (c) 2024 CsvHandler
// Licensed under the MIT License

using System;
using System.Buffers;

namespace CsvHandler;

/// <summary>
/// Metadata for a single field in a CSV type.
/// </summary>
/// <remarks>
/// <para>
/// CsvFieldInfo provides compile-time metadata about CSV fields including:
/// </para>
/// <list type="bullet">
/// <item>Field naming and ordering in the CSV output</item>
/// <item>Type information and format specifications</item>
/// <item>Custom converters and default values</item>
/// <item>Required field validation</item>
/// <item>Individual field reading/writing delegates</item>
/// </list>
/// <para>
/// Instances are created by source generators and stored in CsvTypeInfo.
/// </para>
/// </remarks>
public sealed class CsvFieldInfo
{
    /// <summary>
    /// Gets the CLR property or field name.
    /// </summary>
    public required string Name { get; init; }

    /// <summary>
    /// Gets the name used in CSV headers and data.
    /// If null, uses the CLR name.
    /// </summary>
    public string? CsvName { get; init; }

    /// <summary>
    /// Gets the effective CSV name, preferring CsvName over Name.
    /// </summary>
    public string EffectiveCsvName => CsvName ?? Name;

    /// <summary>
    /// Gets the zero-based position of this field in CSV output.
    /// Used to determine field ordering in CSV rows.
    /// </summary>
    public required int Order { get; init; }

    /// <summary>
    /// Gets the zero-based index used for parsing.
    /// Typically matches Order unless custom mapping is used.
    /// </summary>
    public int Index { get; init; }

    /// <summary>
    /// Gets the CLR type of the field.
    /// </summary>
    public required Type FieldType { get; init; }

    /// <summary>
    /// Gets the format string for value serialization.
    /// Used for types like DateTime, decimal, etc.
    /// </summary>
    /// <example>
    /// "yyyy-MM-dd" for dates, "F2" for decimals with 2 decimal places
    /// </example>
    public string? Format { get; init; }

    /// <summary>
    /// Gets whether this field is required to be present in CSV data.
    /// If true, parsing will fail if the field is missing or empty.
    /// </summary>
    public bool IsRequired { get; init; }

    /// <summary>
    /// Gets the default value to use if the field is missing or empty.
    /// Only used when IsRequired is false.
    /// </summary>
    public object? DefaultValue { get; init; }

    /// <summary>
    /// Gets whether to ignore this field during serialization.
    /// Useful for computed or internal properties.
    /// </summary>
    public bool Ignore { get; init; }

    /// <summary>
    /// Gets the custom converter type for this field.
    /// Must implement ICsvConverter&lt;T&gt; for the field type.
    /// </summary>
    public Type? ConverterType { get; init; }

    /// <summary>
    /// Delegate for reading this field from a CSV data span.
    /// </summary>
    /// <remarks>
    /// Takes the field data as a UTF-8 span and returns the parsed value.
    /// Generated by source generators to provide efficient, type-specific parsing.
    /// </remarks>
    public CsvFieldReader? Reader { get; init; }

    /// <summary>
    /// Delegate for writing this field to a buffer writer.
    /// </summary>
    /// <remarks>
    /// Takes the field value and writes it to an IBufferWriter in CSV format.
    /// Generated by source generators to provide efficient, type-specific serialization.
    /// </remarks>
    public Action<IBufferWriter<byte>, object?>? Writer { get; init; }

    /// <summary>
    /// Creates a new CsvFieldInfo instance.
    /// </summary>
    public CsvFieldInfo()
    {
    }

    /// <summary>
    /// Validates that this field info is properly configured.
    /// </summary>
    internal void Validate()
    {
        if (string.IsNullOrWhiteSpace(Name))
            throw new InvalidOperationException("Field name cannot be null or whitespace.");

        if (FieldType == null)
            throw new InvalidOperationException($"Field '{Name}' must have a FieldType specified.");

        if (Order < 0)
            throw new InvalidOperationException($"Field '{Name}' has invalid Order {Order}. Order must be >= 0.");

        if (Index < 0)
            throw new InvalidOperationException($"Field '{Name}' has invalid Index {Index}. Index must be >= 0.");

        if (IsRequired && DefaultValue != null)
            throw new InvalidOperationException(
                $"Field '{Name}' cannot be both required and have a default value.");

        if (ConverterType != null)
        {
            // Validate converter type implements ICsvConverter<FieldType>
            var converterInterface = typeof(ICsvConverter<>).MakeGenericType(FieldType);
            if (!converterInterface.IsAssignableFrom(ConverterType))
                throw new InvalidOperationException(
                    $"Converter type '{ConverterType.Name}' for field '{Name}' must implement ICsvConverter<{FieldType.Name}>.");
        }
    }

    /// <summary>
    /// Returns a string representation of this field info.
    /// </summary>
    public override string ToString() =>
        $"{EffectiveCsvName} ({FieldType.Name}) [Order: {Order}, Index: {Index}]";
}

/// <summary>
/// Builder for constructing CsvFieldInfo instances.
/// </summary>
public sealed class CsvFieldInfoBuilder
{
    private string? _name;
    private string? _csvName;
    private int _order = -1;
    private int _index = -1;
    private Type? _fieldType;
    private string? _format;
    private bool _isRequired;
    private object? _defaultValue;
    private bool _ignore;
    private Type? _converterType;
    private CsvFieldReader? _reader;
    private Action<IBufferWriter<byte>, object?>? _writer;

    /// <summary>
    /// Sets the CLR property or field name.
    /// </summary>
    public CsvFieldInfoBuilder WithName(string name)
    {
        _name = name;
        return this;
    }

    /// <summary>
    /// Sets the CSV column name.
    /// </summary>
    public CsvFieldInfoBuilder WithCsvName(string csvName)
    {
        _csvName = csvName;
        return this;
    }

    /// <summary>
    /// Sets the field order in CSV output.
    /// </summary>
    public CsvFieldInfoBuilder WithOrder(int order)
    {
        _order = order;
        return this;
    }

    /// <summary>
    /// Sets the field index for parsing.
    /// </summary>
    public CsvFieldInfoBuilder WithIndex(int index)
    {
        _index = index;
        return this;
    }

    /// <summary>
    /// Sets the field type.
    /// </summary>
    public CsvFieldInfoBuilder WithFieldType(Type fieldType)
    {
        _fieldType = fieldType;
        return this;
    }

    /// <summary>
    /// Sets the format string.
    /// </summary>
    public CsvFieldInfoBuilder WithFormat(string format)
    {
        _format = format;
        return this;
    }

    /// <summary>
    /// Marks the field as required.
    /// </summary>
    public CsvFieldInfoBuilder AsRequired(bool isRequired = true)
    {
        _isRequired = isRequired;
        return this;
    }

    /// <summary>
    /// Sets the default value.
    /// </summary>
    public CsvFieldInfoBuilder WithDefaultValue(object? defaultValue)
    {
        _defaultValue = defaultValue;
        return this;
    }

    /// <summary>
    /// Marks the field to be ignored.
    /// </summary>
    public CsvFieldInfoBuilder AsIgnored(bool ignore = true)
    {
        _ignore = ignore;
        return this;
    }

    /// <summary>
    /// Sets the custom converter type.
    /// </summary>
    public CsvFieldInfoBuilder WithConverter(Type converterType)
    {
        _converterType = converterType;
        return this;
    }

    /// <summary>
    /// Sets the reader delegate.
    /// </summary>
    public CsvFieldInfoBuilder WithReader(CsvFieldReader reader)
    {
        _reader = reader;
        return this;
    }

    /// <summary>
    /// Sets the writer delegate.
    /// </summary>
    public CsvFieldInfoBuilder WithWriter(Action<IBufferWriter<byte>, object?> writer)
    {
        _writer = writer;
        return this;
    }

    /// <summary>
    /// Builds and validates the final CsvFieldInfo instance.
    /// </summary>
    public CsvFieldInfo Build()
    {
        if (_name == null)
            throw new InvalidOperationException("Field name is required.");
        if (_fieldType == null)
            throw new InvalidOperationException("Field type is required.");
        if (_order < 0)
            throw new InvalidOperationException("Field order must be set.");

        var field = new CsvFieldInfo
        {
            Name = _name,
            CsvName = _csvName,
            Order = _order,
            Index = _index >= 0 ? _index : _order,
            FieldType = _fieldType,
            Format = _format,
            IsRequired = _isRequired,
            DefaultValue = _defaultValue,
            Ignore = _ignore,
            ConverterType = _converterType,
            Reader = _reader,
            Writer = _writer
        };

        field.Validate();
        return field;
    }
}
