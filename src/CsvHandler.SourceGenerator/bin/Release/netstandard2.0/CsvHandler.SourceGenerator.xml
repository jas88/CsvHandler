<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsvHandler.SourceGenerator</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Indicates the name of the parameter that provides the argument.
            Used for parameter validation messages.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Polyfill for init-only properties in netstandard2.0.
            </summary>
        </member>
        <member name="M:System.ArgumentNullExceptionPolyfill.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.
            </summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="T:System.HashCode">
            <summary>
            Polyfill for HashCode in netstandard2.0.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.CodeEmitter">
            <summary>
            Encapsulates code generation logic for CSV reading and writing.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitReader(CsvHandler.SourceGenerator.Models.RecordModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder)">
            <summary>
            Emits the ReadFromCsv method for synchronous CSV reading.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitAsyncReader(CsvHandler.SourceGenerator.Models.RecordModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder)">
            <summary>
            Emits the ReadAllFromCsvAsync method for async streaming.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitWriter(CsvHandler.SourceGenerator.Models.RecordModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder)">
            <summary>
            Emits the WriteToCsv method for synchronous CSV writing.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitAsyncWriter(CsvHandler.SourceGenerator.Models.RecordModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder)">
            <summary>
            Emits the WriteToCsvAsync method for async streaming.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitFieldRead(CsvHandler.SourceGenerator.Models.FieldModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder,CsvHandler.SourceGenerator.Models.RecordModel,System.Int32)">
            <summary>
            Emits code to read a single field and assign it to a property/field.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitFieldParsing(CsvHandler.SourceGenerator.Models.FieldModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder,CsvHandler.SourceGenerator.Models.RecordModel,System.String)">
            <summary>
            Emits type-specific parsing code for a field.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitUtf8ParserCall(CsvHandler.SourceGenerator.Models.FieldModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder,System.String,System.String,System.String)">
            <summary>
            Emits Utf8Parser call for a field.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitFieldWrite(CsvHandler.SourceGenerator.Models.FieldModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder,CsvHandler.SourceGenerator.Models.RecordModel,System.Int32)">
            <summary>
            Emits code to write a single field to the buffer.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CodeEmitter.EmitFieldFormatting(CsvHandler.SourceGenerator.Models.FieldModel,CsvHandler.SourceGenerator.Helpers.CodeBuilder,CsvHandler.SourceGenerator.Models.RecordModel,System.Int32)">
            <summary>
            Emits type-specific formatting code for a field.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.CsvSourceGenerator">
            <summary>
            Incremental source generator for CSV record types.
            </summary>
            <remarks>
            This generator uses ForAttributeWithMetadataName for optimal performance (99x faster than syntax walking).
            It generates partial class implementations with CSV reading/writing capabilities.
            </remarks>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.IsCandidateSyntax(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Fast predicate to filter candidate syntax nodes.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.TransformRecord(Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext,System.Threading.CancellationToken)">
            <summary>
            Transforms semantic model into our cached RecordModel structure.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.ExtractFields(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Threading.CancellationToken)">
            <summary>
            Extracts field metadata from type members.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.IsValidCsvType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks if a type is supported for CSV serialization.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.IsPartial(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Checks if a syntax node has partial modifier.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.GetAttributeValue``1(Microsoft.CodeAnalysis.AttributeData,System.String,``0)">
            <summary>
            Gets attribute constructor or named parameter value.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.GenerateSource(Microsoft.CodeAnalysis.SourceProductionContext,CsvHandler.SourceGenerator.Models.RecordModel)">
            <summary>
            Generates the source code for a record model.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.ValidateModel(Microsoft.CodeAnalysis.SourceProductionContext,CsvHandler.SourceGenerator.Models.RecordModel)">
            <summary>
            Validates the record model and reports diagnostics.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.CsvSourceGenerator.GenerateAttributeSource">
            <summary>
            Generates the CsvRecord and CsvField attribute definitions.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.Diagnostics">
            <summary>
            Diagnostic descriptors for CSV source generator errors and warnings.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.MustBePartial">
            <summary>
            CSV001: Types decorated with [CsvRecord] must be declared as partial.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.DuplicateFieldOrder">
            <summary>
            CSV002: Duplicate field order detected.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.UnsupportedFieldType">
            <summary>
            CSV003: Field type is not supported for CSV serialization.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.CannotBeNested">
            <summary>
            CSV004: CsvRecord cannot be applied to nested types.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.NoFieldsFound">
            <summary>
            CSV005: No CSV fields found in record.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.InvalidFieldOrder">
            <summary>
            CSV006: Field order must be non-negative.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.InvalidConverterType">
            <summary>
            CSV007: Custom converter type is invalid.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.EmptyFieldName">
            <summary>
            CSV008: Field name cannot be empty.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.DuplicateFieldName">
            <summary>
            CSV009: Duplicate field names detected.
            </summary>
        </member>
        <member name="F:CsvHandler.SourceGenerator.Diagnostics.MustBeClassOrRecord">
            <summary>
            CSV010: Type must be a class or record.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.Helpers.CodeBuilder">
            <summary>
            Utility class for building source code with proper indentation and formatting.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendLine(System.String)">
            <summary>
            Appends a line of code with current indentation.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendLine">
            <summary>
            Appends an empty line.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.Append(System.String)">
            <summary>
            Appends text without a newline.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.Indent">
            <summary>
            Increases indentation level.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.Unindent">
            <summary>
            Decreases indentation level.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.OpenBrace">
            <summary>
            Appends an opening brace and increases indentation.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.CloseBrace">
            <summary>
            Decreases indentation and appends a closing brace.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendNamespace(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends namespace declaration with usings.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendTypeDeclaration(System.String,System.Boolean,System.Boolean)">
            <summary>
            Appends a class or record declaration.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendXmlDoc(System.String)">
            <summary>
            Appends XML documentation comment.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendXmlDoc(System.String,System.String)">
            <summary>
            Appends XML documentation with remarks.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendDirective(System.String)">
            <summary>
            Appends a conditional compilation directive.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.AppendConditional(System.String,System.Action{CsvHandler.SourceGenerator.Helpers.CodeBuilder})">
            <summary>
            Appends code within a conditional compilation block.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilder.BeginScope">
            <summary>
            Creates a scoped indentation block.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.Helpers.CodeBuilder.IndentScope">
            <summary>
            Disposable scope for automatic indentation management.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.Helpers.CodeBuilderExtensions">
            <summary>
            Extension methods for code generation helpers.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilderExtensions.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Joins a collection with a separator and optional transform.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilderExtensions.ToLiteral(System.String)">
            <summary>
            Escapes a string literal for C# code.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Helpers.CodeBuilderExtensions.ToLiteral(System.Char)">
            <summary>
            Converts a char to a C# char literal.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.Models.FieldModel">
            <summary>
            Represents metadata for a single CSV field within a record.
            </summary>
            <remarks>
            This is an equatable struct optimized for incremental generator caching.
            All reference types use SymbolEqualityComparer for proper equality checks.
            </remarks>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.MemberName">
            <summary>
            The name of the field or property in the C# type.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.CsvName">
            <summary>
            The CSV column name (may differ from member name).
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.FieldType">
            <summary>
            The type symbol of the field.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.Order">
            <summary>
            The order/index of this field in the CSV (0-based).
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.Format">
            <summary>
            Format string for serialization (e.g., date format).
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.IsNullable">
            <summary>
            Whether this field is nullable.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.ConverterType">
            <summary>
            Custom converter type symbol, if specified.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.IsProperty">
            <summary>
            Whether this is a property (true) or field (false).
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.FieldModel.Location">
            <summary>
            Location for diagnostic reporting.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Models.FieldModel.GetFullyQualifiedTypeName">
            <summary>
            Gets the fully qualified type name for code generation.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Models.FieldModel.GetMinimalTypeName">
            <summary>
            Gets the minimal type name (without namespace) for code generation.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Models.FieldModel.IsWellKnownType">
            <summary>
            Checks if this field type is a primitive or well-known type.
            </summary>
        </member>
        <member name="T:CsvHandler.SourceGenerator.Models.RecordModel">
            <summary>
            Represents metadata for a CSV record type.
            </summary>
            <remarks>
            This is an equatable struct optimized for incremental generator caching.
            Uses ImmutableArray with custom equality for field collections.
            </remarks>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.TypeName">
            <summary>
            The name of the type (without namespace).
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.Namespace">
            <summary>
            The fully qualified namespace of the type.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.TypeSymbol">
            <summary>
            The type symbol for the record.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.Fields">
            <summary>
            Collection of fields in this record.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.IsPartial">
            <summary>
            Whether the type is declared as partial.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.IsRecord">
            <summary>
            Whether the type is a record type.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.Delimiter">
            <summary>
            The delimiter character configured in [CsvRecord].
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.HasHeader">
            <summary>
            Whether to include a header row.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.StrictMode">
            <summary>
            Whether to use strict mode (throw on format errors).
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.CultureName">
            <summary>
            The culture name for parsing (e.g., "en-US").
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.TrimWhitespace">
            <summary>
            Whether to trim whitespace from fields.
            </summary>
        </member>
        <member name="P:CsvHandler.SourceGenerator.Models.RecordModel.Location">
            <summary>
            Location for diagnostic reporting.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Models.RecordModel.GetFullyQualifiedName">
            <summary>
            Gets the fully qualified type name.
            </summary>
        </member>
        <member name="M:CsvHandler.SourceGenerator.Models.RecordModel.GetRequiredUsings">
            <summary>
            Gets required namespace usings for generated code.
            </summary>
        </member>
        <member name="T:CsvHandler.Attributes.CsvColumnAttribute">
            <summary>
            Specifies CSV column mapping for a property.
            </summary>
        </member>
        <member name="P:CsvHandler.Attributes.CsvColumnAttribute.Name">
            <summary>
            Gets or sets the column name in the CSV file.
            </summary>
        </member>
        <member name="P:CsvHandler.Attributes.CsvColumnAttribute.Order">
            <summary>
            Gets or sets the column order (0-based index).
            </summary>
        </member>
        <member name="P:CsvHandler.Attributes.CsvColumnAttribute.Required">
            <summary>
            Gets or sets whether this column is required.
            </summary>
        </member>
        <member name="P:CsvHandler.Attributes.CsvColumnAttribute.DefaultValue">
            <summary>
            Gets or sets the default value if the column is missing or empty.
            </summary>
        </member>
        <member name="T:CsvHandler.Attributes.CsvConverterAttribute">
             <summary>
             Specifies a custom converter type for CSV serialization and deserialization.
             </summary>
             <remarks>
             <para>
             This attribute can be applied to types or individual properties/fields to specify
             a custom converter that handles serialization and deserialization logic.
             </para>
             <para>
             The converter type must implement the appropriate converter interface (to be defined)
             and must have a public parameterless constructor.
             </para>
             <para>
             When applied to a type, all instances of that type use the specified converter
             unless overridden at the property/field level.
             </para>
             </remarks>
             <example>
             <code>
             // Custom converter implementation
             public class CustomDateTimeConverter : ICsvConverter&lt;DateTime&gt;
             {
                 public string Serialize(DateTime value)
                 {
                     return value.ToString("O"); // ISO 8601 format
                 }
            
                 public DateTime Deserialize(string value)
                 {
                     return DateTime.Parse(value, null, DateTimeStyles.RoundtripKind);
                 }
             }
            
             // Apply to a type
             [CsvRecord]
             [CsvConverter(typeof(CustomDateTimeConverter))]
             public partial class Event
             {
                 [CsvField(Order = 0)]
                 public string Name { get; set; }
            
                 [CsvField(Order = 1)]
                 public DateTime Timestamp { get; set; } // Uses CustomDateTimeConverter
             }
            
             // Apply to a specific property
             [CsvRecord]
             public partial class Schedule
             {
                 [CsvField(Order = 0)]
                 public string Title { get; set; }
            
                 [CsvField(Order = 1)]
                 [CsvConverter(typeof(CustomDateTimeConverter))]
                 public DateTime StartTime { get; set; }
            
                 [CsvField(Order = 2)]
                 public DateTime EndTime { get; set; } // Uses default DateTime converter
             }
            
             // Custom enum converter
             public class StatusConverter : ICsvConverter&lt;Status&gt;
             {
                 public string Serialize(Status value)
                 {
                     return value switch
                     {
                         Status.Active => "A",
                         Status.Inactive => "I",
                         Status.Pending => "P",
                         _ => throw new ArgumentException($"Unknown status: {value}")
                     };
                 }
            
                 public Status Deserialize(string value)
                 {
                     return value switch
                     {
                         "A" or "Active" => Status.Active,
                         "I" or "Inactive" => Status.Inactive,
                         "P" or "Pending" => Status.Pending,
                         _ => throw new ArgumentException($"Invalid status code: {value}")
                     };
                 }
             }
            
             [CsvRecord]
             public partial class User
             {
                 [CsvField(Order = 0)]
                 public string Name { get; set; }
            
                 [CsvField(Order = 1, Converter = typeof(StatusConverter))]
                 public Status CurrentStatus { get; set; }
             }
             </code>
             </example>
        </member>
        <member name="M:CsvHandler.Attributes.CsvConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHandler.Attributes.CsvConverterAttribute"/> class.
            </summary>
            <param name="converterType">The type of the converter to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="converterType"/> is null.</exception>
        </member>
        <member name="P:CsvHandler.Attributes.CsvConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>
            The converter type, which must implement the appropriate converter interface
            and have a public parameterless constructor.
            </value>
        </member>
        <member name="T:CsvHandler.Attributes.CsvFieldAttribute">
             <summary>
             Marks a property or field for CSV serialization and specifies its mapping configuration.
             </summary>
             <remarks>
             This attribute controls how a property or field is mapped to and from CSV columns.
             Properties and fields without this attribute are included by default unless marked with <see cref="T:CsvHandler.Attributes.CsvIgnoreAttribute"/>.
             </remarks>
             <example>
             <code>
             [CsvRecord]
             public partial class Product
             {
                 // Custom column name and order
                 [CsvField(Name = "Product ID", Order = 0)]
                 public int Id { get; set; }
            
                 // Specific column index (0-based)
                 [CsvField(Index = 1)]
                 public string Name { get; set; }
            
                 // Custom format for DateTime
                 [CsvField(Order = 2, Format = "yyyy-MM-dd")]
                 public DateTime ReleaseDate { get; set; }
            
                 // Custom format for decimal
                 [CsvField(Order = 3, Format = "F2")]
                 public decimal Price { get; set; }
            
                 // Custom converter
                 [CsvField(Order = 4, Converter = typeof(CustomStatusConverter))]
                 public Status CurrentStatus { get; set; }
             }
             </code>
             </example>
        </member>
        <member name="M:CsvHandler.Attributes.CsvFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHandler.Attributes.CsvFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:CsvHandler.Attributes.CsvFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHandler.Attributes.CsvFieldAttribute"/> class with the specified column name.
            </summary>
            <param name="name">The name of the CSV column.</param>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Name">
            <summary>
            Gets or sets the name of the CSV column.
            </summary>
            <remarks>
            If not specified, the property or field name is used as the column name.
            This is used for header matching when <see cref="P:CsvHandler.Attributes.CsvRecordAttribute.HasHeaders"/> is true.
            </remarks>
            <value>The CSV column name, or null to use the member name.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Index">
            <summary>
            Gets or sets the zero-based index of the CSV column.
            </summary>
            <remarks>
            This specifies the exact column position in the CSV file.
            If both <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Index"/> and <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Order"/> are specified, <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Index"/> takes precedence.
            If neither is specified, fields are ordered by declaration order.
            </remarks>
            <value>The zero-based column index, or -1 to use <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Order"/> or declaration order.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Order">
            <summary>
            Gets or sets the relative order of this field in the CSV output.
            </summary>
            <remarks>
            Fields are ordered by this value during serialization.
            Lower values appear first. Fields with the same order value are ordered by declaration order.
            This is ignored if <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Index"/> is specified.
            </remarks>
            <value>The relative order value, or -1 to use declaration order.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Format">
            <summary>
            Gets or sets the format string for formatting the field value.
            </summary>
            <remarks>
            This is used when converting values to strings during serialization.
            The format string is passed to the type's ToString method or string.Format.
            Common examples:
            <list type="bullet">
            <item><description>DateTime: "yyyy-MM-dd", "MM/dd/yyyy HH:mm:ss"</description></item>
            <item><description>Decimal/Double: "F2" (2 decimal places), "N0" (no decimals with thousands separator)</description></item>
            <item><description>Integer: "D5" (5 digits with leading zeros), "X" (hexadecimal)</description></item>
            </list>
            </remarks>
            <value>The format string, or null to use default formatting.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Converter">
            <summary>
            Gets or sets the type of a custom converter for this field.
            </summary>
            <remarks>
            The converter type must implement the appropriate converter interface and have a parameterless constructor.
            Custom converters override default serialization and deserialization logic.
            </remarks>
            <value>The converter type, or null to use default conversion.</value>
            <seealso cref="T:CsvHandler.Attributes.CsvConverterAttribute"/>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this field should be ignored during CSV operations.
            </summary>
            <remarks>
            This is equivalent to applying the <see cref="T:CsvHandler.Attributes.CsvIgnoreAttribute"/> attribute.
            Ignored fields are not read from or written to CSV files.
            </remarks>
            <value>
            <c>true</c> to ignore this field; otherwise, <c>false</c>. Default is <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this field is required during deserialization.
            </summary>
            <remarks>
            When true, deserialization fails if the field is missing or empty.
            This validation is performed before type conversion.
            </remarks>
            <value>
            <c>true</c> if the field is required; otherwise, <c>false</c>. Default is <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvFieldAttribute.DefaultValue">
            <summary>
            Gets or sets the default value to use when the field is empty or missing during deserialization.
            </summary>
            <remarks>
            This value is used only if the field is not <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Required"/>.
            The value must be compatible with the field's type or will cause a conversion error.
            </remarks>
            <value>The default value, or null if no default is specified.</value>
        </member>
        <member name="T:CsvHandler.Attributes.CsvIgnoreAttribute">
             <summary>
             Marks a property or field to be excluded from CSV serialization and deserialization.
             </summary>
             <remarks>
             Properties and fields marked with this attribute are completely ignored during CSV operations.
             This is useful for internal state, computed properties, or data that should not be persisted.
             </remarks>
             <example>
             <code>
             [CsvRecord]
             public partial class User
             {
                 [CsvField(Order = 0)]
                 public string Username { get; set; }
            
                 [CsvField(Order = 1)]
                 public string Email { get; set; }
            
                 // This property is not included in CSV
                 [CsvIgnore]
                 public string PasswordHash { get; set; }
            
                 // Computed properties can be ignored
                 [CsvIgnore]
                 public string DisplayName => $"{FirstName} {LastName}";
            
                 // Internal state
                 [CsvIgnore]
                 public DateTime LastModified { get; set; }
             }
             </code>
             </example>
        </member>
        <member name="M:CsvHandler.Attributes.CsvIgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHandler.Attributes.CsvIgnoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:CsvHandler.Attributes.CsvRecordAttribute">
             <summary>
             Marks a class or struct for CSV serialization and deserialization.
             The type must be declared as partial to allow source generation.
             </summary>
             <remarks>
             This attribute enables automatic generation of CSV serialization code for the target type.
             The source generator will create methods to read from and write to CSV format.
             </remarks>
             <example>
             <code>
             [CsvRecord(HasHeaders = true, Delimiter = ',')]
             public partial class Person
             {
                 [CsvField(Order = 0)]
                 public string Name { get; set; }
            
                 [CsvField(Order = 1)]
                 public int Age { get; set; }
             }
             </code>
             </example>
        </member>
        <member name="M:CsvHandler.Attributes.CsvRecordAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHandler.Attributes.CsvRecordAttribute"/> class.
            </summary>
        </member>
        <member name="P:CsvHandler.Attributes.CsvRecordAttribute.Delimiter">
            <summary>
            Gets or sets the delimiter character used to separate fields in the CSV.
            </summary>
            <remarks>
            Common delimiters include:
            <list type="bullet">
            <item><description>Comma (,) - Default and most common</description></item>
            <item><description>Tab (\t) - For TSV files</description></item>
            <item><description>Semicolon (;) - Common in European locales</description></item>
            <item><description>Pipe (|) - For data with many commas</description></item>
            </list>
            </remarks>
            <value>The delimiter character. Default is comma (,).</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvRecordAttribute.Quote">
            <summary>
            Gets or sets the quote character used to enclose fields containing special characters.
            </summary>
            <remarks>
            Fields containing the delimiter, newlines, or the quote character itself
            will be enclosed in quotes. Quote characters within fields are escaped by doubling.
            </remarks>
            <value>The quote character. Default is double quote (").</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvRecordAttribute.HasHeaders">
            <summary>
            Gets or sets a value indicating whether the CSV file has a header row.
            </summary>
            <remarks>
            When true, the first row is treated as column headers during deserialization
            and headers are written during serialization. Field names can be customized
            using the <see cref="P:CsvHandler.Attributes.CsvFieldAttribute.Name"/> property.
            </remarks>
            <value>
            <c>true</c> if the CSV has headers; otherwise, <c>false</c>. Default is <c>true</c>.
            </value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvRecordAttribute.Escape">
            <summary>
            Gets or sets the escape character used for special characters in fields.
            </summary>
            <remarks>
            If not set, quote doubling is used as the escape mechanism.
            Setting this enables backslash-style escaping (e.g., \" for quotes).
            </remarks>
            <value>The escape character, or null to use quote doubling.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvRecordAttribute.TrimWhitespace">
            <summary>
            Gets or sets a value indicating whether to trim whitespace from field values.
            </summary>
            <remarks>
            When true, leading and trailing whitespace is removed from field values
            during deserialization. This does not affect values within quoted fields.
            </remarks>
            <value>
            <c>true</c> to trim whitespace; otherwise, <c>false</c>. Default is <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvRecordAttribute.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating whether to skip empty lines during deserialization.
            </summary>
            <remarks>
            When true, completely empty lines are ignored during CSV parsing.
            Lines containing only whitespace are considered empty if <see cref="P:CsvHandler.Attributes.CsvRecordAttribute.TrimWhitespace"/> is true.
            </remarks>
            <value>
            <c>true</c> to skip empty lines; otherwise, <c>false</c>. Default is <c>true</c>.
            </value>
        </member>
        <member name="T:CsvHandler.Attributes.CsvSerializableAttribute">
             <summary>
             Registers a CSV-serializable type with a CSV context class for ahead-of-time (AOT) compilation.
             </summary>
             <remarks>
             <para>
             This attribute is applied to context classes that manage CSV serialization metadata.
             It triggers source generation for the specified types, enabling fast, AOT-friendly serialization.
             </para>
             <para>
             Context classes should be partial and can aggregate multiple CSV-serializable types.
             The source generator creates optimized serialization code for all registered types.
             </para>
             </remarks>
             <example>
             <code>
             // Define CSV record types
             [CsvRecord]
             public partial class Person
             {
                 [CsvField(Order = 0)]
                 public string Name { get; set; }
            
                 [CsvField(Order = 1)]
                 public int Age { get; set; }
             }
            
             [CsvRecord]
             public partial class Product
             {
                 [CsvField(Order = 0)]
                 public int Id { get; set; }
            
                 [CsvField(Order = 1)]
                 public string Name { get; set; }
             }
            
             // Register types in a context
             [CsvSerializable(typeof(Person))]
             [CsvSerializable(typeof(Product))]
             public partial class MyCsvContext
             {
                 // The source generator will add serialization methods here
             }
            
             // Usage
             var context = new MyCsvContext();
             var people = context.DeserializePerson(csvContent);
             var csv = context.SerializePerson(people);
             </code>
             </example>
        </member>
        <member name="M:CsvHandler.Attributes.CsvSerializableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHandler.Attributes.CsvSerializableAttribute"/> class.
            </summary>
            <param name="type">The type to register for CSV serialization.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="type"/> is not marked with <see cref="T:CsvHandler.Attributes.CsvRecordAttribute"/>.
            </exception>
        </member>
        <member name="P:CsvHandler.Attributes.CsvSerializableAttribute.Type">
            <summary>
            Gets the type registered for CSV serialization.
            </summary>
            <value>The registered type that must be marked with <see cref="T:CsvHandler.Attributes.CsvRecordAttribute"/>.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvSerializableAttribute.TypeName">
            <summary>
            Gets or sets the name used to identify this serializable type in generated code.
            </summary>
            <remarks>
            If not specified, the type name is used. This is useful when the context manages
            multiple types with the same name from different namespaces.
            Generated methods will use this name (e.g., Serialize{TypeName}, Deserialize{TypeName}).
            </remarks>
            <value>The type name for generated code, or null to use the actual type name.</value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvSerializableAttribute.GenerateAsync">
            <summary>
            Gets or sets a value indicating whether to generate async methods for this type.
            </summary>
            <remarks>
            When true, generates async methods like SerializeAsync and DeserializeAsync
            that work with Stream and StreamReader/StreamWriter.
            </remarks>
            <value>
            <c>true</c> to generate async methods; otherwise, <c>false</c>. Default is <c>true</c>.
            </value>
        </member>
        <member name="P:CsvHandler.Attributes.CsvSerializableAttribute.GenerateSync">
            <summary>
            Gets or sets a value indicating whether to generate synchronous methods for this type.
            </summary>
            <remarks>
            When true, generates synchronous methods like Serialize and Deserialize
            that work with string and TextReader/TextWriter.
            </remarks>
            <value>
            <c>true</c> to generate synchronous methods; otherwise, <c>false</c>. Default is <c>true</c>.
            </value>
        </member>
    </members>
</doc>
